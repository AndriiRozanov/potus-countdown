// scripts/build-sitemap.mjs — додає локалізовані URL-и
import fs from "node:fs/promises";

const BASE = (process.env.SITE_BASE_URL || "https://presidencyclock.com").replace(/\/+$/, "");
const LANGS = ["en","uk","es","fr","de","it","zh","ja"];
const PAGES = [
  { path: "/",               deps: ["index.html", "data/trump-today.json", "data/digest.json", "data/presidents.json"] },
  { path: "/trump-today.html", deps: ["trump-today.html", "data/trump-today.json"] },
  { path: "/digest.html",      deps: ["digest.html",      "data/digest.json"] },
  { path: "/presidents.html",  deps: ["presidents.html",  "data/presidents.json"] },
  { path: "/about.html",       deps: ["about.html"] },
  { path: "/privacy.html",     deps: ["privacy.html"] },
  { path: "/contact.html",     deps: ["contact.html"] }
];

function langUrl(lang, pagePath) {
  if (lang === "en") return BASE + (pagePath === "/" ? "/" : pagePath);
  return BASE + (pagePath === "/" ? `/${lang}/` : `/${lang}${pagePath}`);
}

async function mtimeISO(file){ try{ const s=await fs.stat(file); return s.mtime.toISOString(); } catch{ return null; } }
async function lastmodFor(deps){
  const times=(await Promise.all(deps.map(mtimeISO))).filter(Boolean).map(t=>new Date(t));
  const latest=times.length?new Date(Math.max(...times)):new Date();
  return latest.toISOString();
}

async function main(){
  const entries=[];
  for(const p of PAGES){
    const lastmod=await lastmodFor(p.deps);
    for(const lang of LANGS){
      const loc=langUrl(lang, p.path);
      const priority=(p.path==="/" ? "1.0" : "0.7");
      entries.push(`  <url>
    <loc>${loc}</loc>
    <lastmod>${lastmod}</lastmod>
    <changefreq>daily</changefreq>
    <priority>${priority}</priority>
  </url>`);
    }
  }

  const xml = `<?xml version="1.0" encoding="UTF-8"?>
<!-- Generated by build-sitemap.mjs (localized) -->
<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">
${entries.join("\n")}
</urlset>
`;
  await fs.writeFile("sitemap.xml", xml, "utf8");
  console.log("sitemap.xml with localized URLs written for", BASE);
}
main().catch(e=>{ console.error(e); process.exit(1); });
